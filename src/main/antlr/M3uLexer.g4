lexer grammar M3uLexer;

WS: SPACES+ -> skip;
NEWLINE: NEWLINES -> skip;
FILE_START: '#EXTM3U';
CHANNEL_START: EXTINF;
NUMBER: '-'? DIGIT+;
SAFE_STRING: SAFE_CHAR+;
QUOTED_STRING: QUOTE (SAFE_CHAR | NUMBER | COLON | EQUALS | SPACES | COMMA)* QUOTE;
COMMA: ',' -> pushMode(CHANNEL_DESC);
COLON: ':';
EQUALS: '=';

mode CHANNEL_DESC;

CHANNEL_DESC_NEWLINE: NEWLINES -> skip;
CHANNEL_DESC_TEXT: CHANNEL_DESC_SAFE_CHAR+;
CHANNEL_DESC_GROUP: '#EXTGRP' -> pushMode(CHANNEL_GROUP);
CHANNEL_DESC_CHANNEL_START: EXTINF -> popMode;
CHANNEL_GROUP_HASH: '#' -> pushMode(COMMENT);

mode CHANNEL_GROUP;

CHANNEL_GROUP_COLON: ':';
CHANNEL_GROUP_TEXT: CHANNEL_GROUP_SAFE_CHAR+;
CHANNEL_GROUP_NEWLINE: NEWLINES -> popMode, skip;

mode COMMENT;
COMMENT_TEXT: COMMENT_SAFE_CHAR+;
COMMENT_NEWLINE: NEWLINES -> popMode, skip;

fragment NEWLINES: ('\r\n' | '\r' | '\n');
fragment EXTINF: '#EXTINF';
fragment QUOTE: '"';
fragment SPACES: [ \t];
fragment DIGIT: [0-9];
fragment SAFE_CHAR: ~[":= \t,\r\n];
fragment CHANNEL_DESC_SAFE_CHAR: ~[#\r\n];
fragment CHANNEL_GROUP_SAFE_CHAR: ~[:\r\n];
fragment COMMENT_SAFE_CHAR: ~[\r\n];